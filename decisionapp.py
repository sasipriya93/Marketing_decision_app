{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f32b232a-f311-46a4-bc0f-8c497414c6b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-13 12:36:01.258 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\SPLPT 1224\\Downloads\\new floder\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-06-13 12:36:01.260 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "\n",
    "st.set_page_config(page_title=\"Marketing Decision Support Tool\", page_icon=\"üìä\")\n",
    "\n",
    "st.title(\"üìä Marketing Decision Support Tool\")\n",
    "st.markdown(\"This app helps decision-makers evaluate marketing choices based on basic inputs.\")\n",
    "\n",
    "# Input form\n",
    "with st.form(\"decision_form\"):\n",
    "    decision_type = st.selectbox(\n",
    "        \"What type of marketing decision do you want to make?\",\n",
    "        [\"Product\", \"Price\", \"Place\", \"Promotion\", \"People\", \"Process\", \"Physical Evidence\"]\n",
    "    )\n",
    "    \n",
    "    goal = st.text_input(\"What is the goal of this decision? (e.g. Increase sales, brand awareness)\")\n",
    "    budget = st.number_input(\"Approximate budget (in ‚Çπ)\", min_value=0, step=500)\n",
    "    target_market = st.text_input(\"Who is your target market? (e.g. Gen Z, Working Professionals)\")\n",
    "    timeline = st.text_input(\"When do you want to execute this decision? (e.g. July 2025)\")\n",
    "\n",
    "    submitted = st.form_submit_button(\"Submit Decision\")\n",
    "\n",
    "# Logic\n",
    "if submitted:\n",
    "    verdict = \"\"\n",
    "    reason = \"\"\n",
    "    suggestion = \"\"\n",
    "\n",
    "    dt = decision_type.lower()\n",
    "    tm = target_market.lower()\n",
    "    goal_lower = goal.lower()\n",
    "\n",
    "    # Rules logic\n",
    "    if dt == \"price\" and \"student\" in tm:\n",
    "        verdict = \"‚ùå Not Recommended\"\n",
    "        reason = \"Target market is price-sensitive. A price increase may reduce interest.\"\n",
    "        suggestion = \"Try offering added value or discounts.\"\n",
    "\n",
    "    elif dt == \"promotion\" and \"instagram\" in goal_lower:\n",
    "        verdict = \"‚úÖ Good to Go\"\n",
    "        reason = \"Instagram performs well for awareness in young demographics.\"\n",
    "        suggestion = \"Use reels and influencer partnerships.\"\n",
    "\n",
    "    elif dt == \"product\" and \"vegan\" in goal_lower:\n",
    "        verdict = \"‚ö†Ô∏è Moderate Risk\"\n",
    "        reason = \"Vegan demand is rising but competition is intense.\"\n",
    "        suggestion = \"Run a pilot launch in key cities first.\"\n",
    "\n",
    "    elif dt == \"place\" and \"tier 2\" in tm:\n",
    "        verdict = \"‚úÖ Good to Go\"\n",
    "        reason = \"Tier 2 cities are emerging markets. Low competition, good potential.\"\n",
    "        suggestion = \"Focus on regional channels and local influencers.\"\n",
    "\n",
    "    elif dt == \"people\" and \"retention\" in goal_lower:\n",
    "        verdict = \"‚ö†Ô∏è Needs Attention\"\n",
    "        reason = \"High employee turnover affects customer trust.\"\n",
    "        suggestion = \"Invest in internal marketing and employee engagement.\"\n",
    "\n",
    "    elif dt == \"process\" and \"delay\" in goal_lower:\n",
    "        verdict = \"‚ùå Not Recommended\"\n",
    "        reason = \"Delays in marketing operations reduce campaign effectiveness.\"\n",
    "        suggestion = \"Automate repetitive tasks and adopt workflow tools.\"\n",
    "\n",
    "    elif dt == \"physical evidence\" and \"rebrand\" in goal_lower:\n",
    "        verdict = \"‚ö†Ô∏è Moderate Risk\"\n",
    "        reason = \"Rebranding affects customer trust. Needs testing.\"\n",
    "        suggestion = \"Test new visuals with focus groups before full rollout.\"\n",
    "\n",
    "    elif dt == \"promotion\" and \"email\" in goal_lower:\n",
    "        verdict = \"‚ö†Ô∏è Moderate Risk\"\n",
    "        reason = \"Email campaigns work only with high-quality leads.\"\n",
    "        suggestion = \"Segment your list and use A/B testing.\"\n",
    "\n",
    "    elif dt == \"product\" and \"premium\" in goal_lower:\n",
    "        verdict = \"‚ö†Ô∏è Moderate Risk\"\n",
    "        reason = \"Premium product launches need strong branding.\"\n",
    "        suggestion = \"Build brand story and justify price with features.\"\n",
    "\n",
    "    else:\n",
    "        verdict = \"‚ö†Ô∏è Needs Review\"\n",
    "        reason = \"No specific rule matched. Requires deeper data review or expert input.\"\n",
    "        suggestion = \"Collect past data or test on small group before launch.\"\n",
    "\n",
    "    # Show report\n",
    "    st.subheader(\"üìÑ Decision Support Report\")\n",
    "    st.write(f\"**Decision Type:** {decision_type}\")\n",
    "    st.write(f\"**Goal:** {goal}\")\n",
    "    st.write(f\"**Budget:** ‚Çπ{budget}\")\n",
    "    st.write(f\"**Target Market:** {target_market}\")\n",
    "    st.write(f\"**Timeline:** {timeline}\")\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.write(f\"### ‚úÖ Verdict: {verdict}\")\n",
    "    st.write(f\"üìå **Reason:** {reason}\")\n",
    "    st.write(f\"üí° **Suggestion:** {suggestion}\")\n",
    "    st.markdown(\"---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "5411035a-5f7c-444d-804a-4a3296d19a38",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base]",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
